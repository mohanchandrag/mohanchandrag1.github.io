<!DOCTYPE html>
<html>
<head>
    <title>Tabbed Content</title>
    <script src="tabcontent.js" type="text/javascript"></script>
    <link href="template2/tabcontent.css" rel="stylesheet" type="text/css" />
</head>
<body style="background:#B7DBFF; font-family:Arial;">
    <div style="width: 1400px; margin: 0 auto; padding: 0px 0 0px;">
        <ul class="tabs" data-persist="true">
            <li><a href="#view1">Detailed Status</a></li>
            <li><a href="#view2">Tree View</a></li>
            <li><a href="#view3">Statistics</a></li>
             <li><a href="#view4">Team Contacts</a></li>
        </ul>
        <div class="tabcontents">
            <div id="view1">
                <b>Lorem Issum</b>
                <p>Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...</p>
                
            </div>
            <div id="view2">
                

<script src="d3.min.js"></script>

<style>


.style_label {
background: #CDDCF1; 
color: #003366; 
font-family: Calibri, Helvetica, overflow: hidden; sans-serif; 
font-size: 7pt; 
font-weight: bold; 
text-decoration: none}


.style_data {
background: #E7EEF8; 
color: #003366; 
font-family: Calibri, Helvetica, overflow: hidden; sans-serif; 
font-size: 8pt; 
font-weight: bold; 
text-decoration: none}


.style_data_blank {
color: #003366; 
font-family: Calibri, Helvetica, overflow: hidden; sans-serif; 
font-size: 8pt; 
font-weight: bold; 
text-decoration: none}


.node {
cursor: pointer;
font: 9px sans-serif;
COLOR: #885580;
}


.node text {
font: 8px sans-serif;
COLOR: #885580;
}


.link {
fill: none;
stroke-width: 1px;
}


.axis path,
.axis line {
fill: none;
stroke: grey;
stroke-width: 1;
shape-rendering: crispEdges;
}


line.arrow 
{ 
COLOR: #885580;
stroke-width: 1px; 
} 


.link-label { 
font-family: sans-serif;  
font-size: 11px; 
} 


.button {
background-color: #004080;
border: none;
color: white;
padding: 5px 20px;
text-align: center;
text-decoration: none;
display: inline-block;
font-size: 10px;
font-weight: bold;
margin: 2px 2px;
transition-duration: 0.4s;
cursor: pointer;
color: white; 
border: 2px solid #008CBA;
border-radius: 8px;
box-shadow: 0 4px 4px 0 rgba(0,0,0,0.2), 0 4px 4px 0 rgba(0,0,0,0.19);
}


.button:hover {
background-color: #008CBA;
color: white;
border: 2px solid #004080;
}



</style>





<script language='JavaScript'>
function setDefaultValues()
{


}


function OpenTubeMapUpdate(a1,a2,a3,a4)
{
window.open("TubeMapUpdate.pl?COB_DATE="+a1+"&APP_GROUP="+a2+"&APP_FLOW="+a3+"&MILESTONE_NAME="+a4);
}


function OpenJobKeDB(a1)
{
window.open("KEDB_ClassicSearch.pl?JOB_NAME="+a1);
}


function OpenJobAnalysis(a1,a2,a3,a4,a5)
{
window.open("TubeMapAnalyser.pl?JOB_TYPE="+a1+"&JOB_NAME="+a2+"&INSTANCE="+a3+"&APP_GROUP="+a4+"&MILESTONE_NAME="+a5+"&RUN_DAYS=30");
}


function OpenJobDependency(a1,a2,a3,a4,a5,a6)
{
window.open("TubeMapDependency.pl?JOB_TYPE="+a1+"&JOB_NAME="+a2+"&INSTANCE="+a3+"&DEPENDENCY="+a4+"&APP_GROUP="+a5+"&MILESTONE_NAME="+a6);
}


function BackClick()
{
parent.parent.TargetFrame.location.href                             = "TubeMapDashboard.pl?CATEGORY_TYPE=L&SECTOR_NAME_VALUE=&LOB_NAME_VALUE=&DEPT_NAME_VALUE=&COB_DATE=12/30/2016&DISPLAY_TYPE=APP-LEVEL";
}


var TubeMapFileName = 'TubeMap1.csv';
var CobDate   = '12/30/2016';


var allNodeNamesArr = [];
var removeFadeNodes = false;
d3.csv("progressmap.csv", function(error, data) 
{
// *********** Convert flat data into a nice tree ***************
var position = 0;
var dataMap = data.reduce(function(map, node) {
allNodeNamesArr[position++] = node.name;
map[node.name] = node;
return map;
}, {});


// create the tree array
var treeData = [];
data.forEach(function(node) 
{
// add to parent
var parent = dataMap[node.parent];
if (parent) {
// create child array if it doesnot exist
(parent.children || (parent.children = []))
				// add node to child array
				.push(node);
} else {
// parent is null or missing
treeData.push(node);
}
});


root = treeData[0];
root.x0 = height / 2;
root.y0 = 0;
update(root);
d3.select(self.frameElement).style("height", "100%");
});




// ************** Generate the tree diagram              *****************
var margin = {top: 10, right: 30, bottom: 10, left: 40},
width = 1400 - margin.right - margin.left;
height = 800 - margin.top - margin.bottom;


var i = 0,
duration = 500,
root;
var switch1 = 1;
var dvalue = 0;
var dvalue1 = 0;
listOfLines = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60];
tempidToRemove = [];
tempbackupidToRemove = [];
numeric = [];
counter = 0;
counter1 = 0;


var tree = d3.layout.tree()
.size([height, width]);


var diagonal = d3.svg.diagonal()
.projection(function(d) { return [d.y,d.x]; });


var  diagonal_new = d3.svg.diagonal()
.projection(function(d) { return [d.x,d.y]; });


var div = d3.select("body")
.append("div")  // declare the tooltip div  
.attr("class", "tooltip")
.style("opacity", 0);


var svg = d3.select("body").append("svg")
.attr("width", width + margin.right + margin.left)
.attr("height", height + margin.top + margin.bottom)
.append("g")
.attr("transform", "translate(" + margin.left + "," + margin.top + ")");


d3.select(self.frameElement).style("height", "100%");


function trim(value) {
return value.replace(/^\s+|\s+$/g,"");
}



var testdata1 = [{ key: "aa", y: 0 },{ key: "aa", y: 100 }];








function update(source) 
{








var KedbImg       ="Images\Info.gif";
var ChartImg      ="Images\Chart.gif";


var RedAlert       ="Images\RedAlert.png";
var AmberAlert ="Images\AmberAlert.png";
var GreenAlert  ="Images\GreenAlert.png";


// Compute the new tree layout.
var nodes = tree.nodes(root).reverse(),
links = tree.links(nodes);


// Normalize for fixed-depth - node distance
nodes.forEach(function(d) { d.y = d.depth * 100; });


// Update the nodesâ€¦
var node = svg.selectAll("g.node")
.data(nodes, function(d) { return d.id || (d.id = ++i); });














// Enter any new nodes at the parents previous position.
var nodeEnter = node.enter().append("g")
.attr("class", function(d){return (d.node_shape == "") ? "node circle" : "node " + d.node_shape;})


.attr("transform", function(d) { 
if(listOfLines.indexOf(d.value))
{
d.posX=Math.round(d.x);
d.posY=Math.round(d.y);
if(!existsNameValue(d.value, d.name,d.posX,d.posY, d.type))
numeric[ counter++]= d.name+'%'+d.value+'#'+d.posX+'^'+d.posY+'$'+d.type;
}
return "translate(" + source.y0 + "," + source.x0 + ")"; 
})

.on("dblclick", click);


svg.selectAll("g.circle").append("circle")
.attr("r", 4)
.style("stroke-width", "2px")


.style("fill", function(d) {
				if( (d.job_name == "")||(d.job_name == " ") ) {
								if(d.job_type == "ROOT_FLOW") {
												return "blue";
								} else {
												return "black";
								}
				} else {
								if(d.tubemap_status=="AMBER") { return "orange"; } else { return d.tubemap_status; }
				}
})
.style("stroke", function(d) { 
				if( (d.job_name == "")||(d.job_name == " ") ) {
								if(d.job_type == "ROOT_FLOW") {
												return "blue";
								} else {
												return "black";
								}
				} else {
								if(d.type=="AMBER") { return "orange"; } else { return d.type; }
				}
});








svg.selectAll("g.rect").append("rect")
.attr("width", 7)
.attr("height", 7)
.attr("x", "-0.4em")
.attr("y", "-0.4em")


.style("stroke-width", "2px")
.style("fill", function(d) {
				if( (d.job_name == "")||(d.job_name == " ") ) {
								if(d.job_type == "ROOT_FLOW") {
												return "blue";
								} else {
												return "black";
								}
				} else {
								if(d.tubemap_status=="AMBER") { return "orange"; } else { return d.tubemap_status; }
				}
})
.style("stroke", function(d) { 
				if( (d.job_name == "")||(d.job_name == " ") ) {
								if(d.job_type == "ROOT_FLOW") {
												return "blue";
								} else {
												return "black";
								}
				} else {
								if(d.type=="AMBER") { return "orange"; } else { return d.type; }
				}
});
svg.selectAll("g.star").append("polygon")
.attr("points", "0 -5 2 -1.75 4 -1.75 2 1 3 4 0 1.75 -3 4 -2 1 -4 -1.75 -2 -1.75")
.style("stroke-width", "0.15em")
.style("fill", function(d) {
				if( (d.job_name == "")||(d.job_name == " ") ) {
								if(d.job_type == "ROOT_FLOW") {
												return "blue";
								} else {
												return "black";
								}
				} else {
								if(d.tubemap_status=="AMBER") { return "orange"; } else { return d.tubemap_status; }
				}
})


.style("stroke", function(d) { 
				if( (d.job_name == "")||(d.job_name == " ") ) {
								if(d.job_type == "ROOT_FLOW") {
												return "blue";
								} else {
												return "black";
								}
				} else {
								if(d.type=="AMBER") { return "orange"; } else { return d.type; }
				}
});
svg.selectAll("g.triangle").append("polygon")
.attr("points", "0 -5 5 5 -5 5")
.style("stroke-width", "2px")
.style("fill", function(d) {
				if( (d.job_name == "")||(d.job_name == " ") ) {
								if(d.job_type == "ROOT_FLOW") {
												return "blue";
								} else {
												return "black";
								}
				} else {
								if(d.tubemap_status=="AMBER") { return "orange"; } else { return d.tubemap_status; }
				}
})
.style("stroke", function(d) { 
				if( (d.job_name == "")||(d.job_name == " ") ) {
								if(d.job_type == "ROOT_FLOW") {
												return "blue";
								} else {
												return "black";
								}
				} else {
								if(d.type=="AMBER") { return "orange"; } else { return d.type; }
				}
});


nodeEnter
.on("click", function(d)  
{
div.transition()
.duration(500)
.style("opacity", 0);

div.transition()
.duration(200)
.style("opacity", .9);


if( (d.job_name != '')&&(d.job_name != ' ') ) { 
				if(d.actual_end == "00:00") {
								if( (d.job_status != "SUCCESS")&&(d.job_status != "COMPLETE") ) {
												d.actual_end = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
								}
				}


				div.html(
				"<table width='100%' border='0' cellspacing='2' cellpadding='1' bordercolor='#FFFFFF'>"+
				"<tr valign='center'>"+
				"<td class='style_label' width='15%' align='center'  colspan='1'>MILESTONE NAME</td>"+
				"<td class='style_data'  width='35%' align='center'  colspan='1'>"+d.display_name+" ( "+d.job_name+" )</td>"+
				"<td class='style_label' width='10%' align='right'  colspan='1'>IDEAL RUN ("+d.time_zone+")</td>"+
				"<td class='style_data'  width='10%' align='center'  colspan='1'>"+d.sla_start+" - "+d.sla_end+"</td>"+
				"<td class='style_label' width='5%'  align='center'  colspan='1'>SLA</td>"+
				"<td class='style_data'  width='10%'  align='center'  colspan='1'>"+d.sla_time+"</td>"+
				"<td class='style_label' width='5%'  align='center'  colspan='1'>ETA</td>"+
				"<td class='style_data'  width='10%'  align='center'  colspan='1'>"+d.eta_time+"</td>"+
				"</tr>"+
				"<tr valign='center'>"+
				"<td class='style_label' width='15%' align='center'  colspan='1'>MILESTONE ANALYSIS</td>"+
				"<td class='style_data_blank'  width='35%' align='center'  colspan='1'>"+
				"<a href='#' onClick=\"OpenTubeMapUpdate('"+CobDate+"','"+d.app_group+"','"+d.app_flow+"','"+d.name+"')\"><img src='Images/InfoNew.gif' height='13' width='13' border='0' title='Remarks Capture'></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+
				"<a href='#' onClick=\"OpenJobKeDB('"+d.job_name+"')\"><img src='Images/Notes.gif' height='13' width='13' border='0' title='Milestone KeDB'></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+
				"<a href='#' onClick=\"OpenJobAnalysis('"+d.job_type+"','"+d.job_name+"','"+d.instance+"','"+d.app_group+"','"+d.name+"')\"><img src='Images/Chart.gif' height='13' width='13' border='0' title='Milestone Analysis'></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+
				"<a href='#' onClick=\"OpenJobDependency('"+d.job_type+"','"+d.job_name+"','"+d.instance+"','UPPER','"+d.app_group+"','"+d.name+"')\"><img src='Images/Upper.jpg' height='13' width='13' border='0' title='Upper Dependency'></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+
				"<a href='#' onClick=\"OpenJobDependency('"+d.job_type+"','"+d.job_name+"','"+d.instance+"','LOWER','"+d.app_group+"','"+d.name+"')\"><img src='Images/Lower.jpg' height='13' width='13' border='0' title='Lower Dependency'></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+
				"<a href='#' onClick=\"OpenJobDependency('"+d.job_type+"','"+d.job_name+"','"+d.instance+"','CURRENT','"+d.app_group+"','"+d.name+"')\"><img src='Images/Modify.gif' height='13' width='13' border='0' title='Current RunDetails'></a>"+
				"</td>"+
				"<td class='style_label' width='10%' align='right'  colspan='1'>CURRENT RUN ("+d.time_zone+")</td>"+
				"<td class='style_data'  width='10%' align='center'  colspan='1'>"+d.actual_start+" - "+d.actual_end+"</td>"+
				"<td class='style_label' width='5%'  align='center'  colspan='1'>STATUS</td>"+
				"<td class='style_data'  width='10%'  align='center'  colspan='1'>"+d.job_status+"</td>"+
				"<td class='style_label' width='5%'  align='center'  colspan='1'>DELAY</td>"+
				"<td class='style_data'  width='10%'  align='center'  colspan='1'>"+d.delay_duration+"</td>"+
				"</tr>"+
				"</table>"
				)
}
else
{
				div.html(
				"<table width='100%' border='0' cellspacing='2' cellpadding='1' bordercolor='#FFFFFF'>"+
				"<tr valign='center'>"+
				"<td class='style_label' width='15%' align='center'  colspan='1'>MILESTONE NAME</td>"+
				"<td class='style_data'  width='35%' align='center'  colspan='1'>"+d.display_name+"</td>"+
				"<td class='style_label' width='10%' align='right'  colspan='1'>&nbsp;</td>"+
				"<td class='style_data'  width='10%' align='center'  colspan='1'>&nbsp;</td>"+
				"<td class='style_label' width='5%'  align='center'  colspan='1'>&nbsp;</td>"+
				"<td class='style_data'  width='10%'  align='center'  colspan='1'>&nbsp;</td>"+
				"<td class='style_label' width='5%'  align='center'  colspan='1'>&nbsp;</td>"+
				"<td class='style_data'  width='10%'  align='center'  colspan='1'>&nbsp;</td>"+
				"</tr>"+
				"<tr valign='center'>"+
				"<td class='style_label' width='15%' align='center'  colspan='1'>MILESTONE ANALYSIS</td>"+
				"<td class='style_data_blank'  width='35%' align='center'  colspan='1'>&nbsp;</td>"+
				"<td class='style_label' width='10%' align='right'  colspan='1'>&nbsp;</td>"+
				"<td class='style_data'  width='10%' align='center'  colspan='1'>&nbsp;</td>"+
				"<td class='style_label' width='5%'  align='center'  colspan='1'>&nbsp;</td>"+
				"<td class='style_data'  width='10%'  align='center'  colspan='1'>&nbsp;</td>"+
				"<td class='style_label' width='5%'  align='center'  colspan='1'>&nbsp;</td>"+
				"<td class='style_data'  width='10%'  align='center'  colspan='1'>&nbsp;</td>"+
				"</tr>"+
				"</table>"
				)
}


}
);




nodeEnter.append("path")
.style("stroke", function(d) 
{
if(d.running_state=="RED") {
				return "red";
} else {
				if(d.running_state=="AMBER") {
								return "orange";
				} else {
								if(d.running_state=="GREEN") {
								return "green";
								} else {
												return "gray";
								}
				}
}
})
.style("fill",function(d)  
{
if(d.running_state=="RED") {
				return "red";
} else {
				if(d.running_state=="AMBER") {
								return "orange";
				} else {
								if(d.running_state=="GREEN") {
								return "green";
								} else {
												return "gray";
								}
				}
}
})
.attr("d", function(d) {
if(d.running_state != "") {
				return "M -8,15, L 0,5, L 8,15 Z"; 
}
});




nodeEnter.append("text") // Display Name
.attr("x", "0.55em")
.attr("y", "-0.55em")
.attr("fill", "#0E6EEE")
.attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
.text(function(d) { return d.display_name; })
.style("fill-opacity", 1);


// Transition nodes to their new position.
var nodeUpdate = node.transition()
.duration(duration)
.attr("transform", function(d) { 
d.posX=d.x;
d.posY=d.y;
return "translate(" + d.y + "," + d.x + ")"; });




// Transition exiting nodes to the parent new position.
var nodeExit = node.exit().transition()
.duration(duration)
.attr("transform", function(d) 
{ 
return "translate(" + source.y + "," + source.x + ")"; 
})
.remove();


nodeExit.select("circle")
.attr("r", 1e-6);


nodeExit.select("text")
.style("fill-opacity", 1e-6);


// Update the links
var link = svg.selectAll("path.link")
.data(links, function(d) {  
return d.target.id; });


// Enter any new links at the parent previous position.
link.enter().insert("path", "g")
.attr("class", "link")
.style("stroke", function(d) { if(d.target.level=="AMBER") { return "orange"; } else { return d.target.level; } })


// Transition links to their new position.
link.transition()
.duration(duration)
.attr("d", diagonal);


// Transition exiting nodes to the parent new position.
link.exit().transition()
.duration(duration)
.attr("d", function(d) {


var o = {x: source.x, y: source.y};
return diagonal({source: o, target: o});
})
.remove();


var currNodeNamesArr = [];
var ind= 0;
nodes.forEach(function(d){
currNodeNamesArr[ind++] = d.name;
});
if(allNodeNamesArr.length > currNodeNamesArr.length){
allNodeNamesArr.forEach(function(current_value, index) {
				currNodeNamesArr[index] = current_value;
});
}


// Stash the old positions for transition.
nodes.forEach(function(d) {
d.x0 = Math.round(d.x);
d.y0 = Math.round(d.y);


if(listOfLines.indexOf(d.value))
{
				currNodeNamesArr.splice((currNodeNamesArr.indexOf(d.name)), 1);
				existsNameValue1(d.value, d.name,Math.round(d.x),Math.round(d.y), d.type);
}
});


var nodeName = [];
var linkColor = [];
var extraPathsArr = [];
ind = 0;
nodes.forEach(function(d) {
if (d.value > 0) {
				currNodeNamesArr[ind++] = d.name;
				if(extraPathsArr[d.value]){
if(d.node_direction == "end"){
extraPathsArr[d.value] = d.name + linkColor[d.value] + "#" + extraPathsArr[d.value] + "," + d.x + "," + d.y;
								} else {
												extraPathsArr[d.value] = nodeName[d.value] + "-" + d.level + "#" + d.x + "," + d.y + "," + extraPathsArr[d.value];
								}
				}else{
								extraPathsArr[d.value] = d.x + "," + d.y;
nodeName[d.value] = d.name;
linkColor[d.value] = "-" + d.level;
				}
  }
});

if(removeFadeNodes){
svg.selectAll("path.fadeNode").remove();
removeFadeNodes = false;
}


var extraLinksDiagonal   = d3.svg.diagonal()
.projection(function(d) { return [d.y,d.x]; });       

svg.append("svg:defs").selectAll("marker") 
				.data(["arrow"])
				.enter().append("svg:marker") 
				.attr("id", String)
.attr("viewBox", "0 0 10 10")
.attr("refX", 5) 
.attr("refY", 5)
.attr("markerUnits", "strokeWidth") 
.attr("stroke-width", 2)
.attr("markerWidth", 10)
.attr("markerHeight", 10)
				.attr("orient", "auto") 
				.append("svg:path") 
.attr("d", "M 0 0 L 10 5 L 0 10 z");

extraPathsArr.forEach(function(curr, index){
if(curr.indexOf('#') > -1){
  removeFadeNodes = true;
  var ps = curr.split("#")[1].split(",");
  var p1x = +ps[0];
  var p1y = +ps[1];
  var p2x = +ps[2];
  var p2y = +ps[3];
var p3x = (p1x > p2x) ? (p1x-Math.abs((p1x-p2x))/2) : (p1x+Math.abs((p1x-p2x))/2);
var p3y = (p1y > p2y) ? (p1y-Math.abs((p1y-p2y))/2) : (p1y+Math.abs((p1y-p2y))/2);
  var lineColor = curr.split("#")[0].split("-")[1];
  extraLinksDiagonal.source({x: p1x, y: p1y})
  .target({x: p2x, y: p2y});
svg.append("path")// attach a path
				.attr("class","fadeNode")
				.style("stroke", lineColor)// colour the line
.style("stroke-width", "1")// colour the line
				.style("fill", "none")// remove any fill colour 
				.attr("d", extraLinksDiagonal);
var arrowHead = svg.append("path")// attach a path
.attr("class","fadeNode")
.style("stroke", "none")// colour the line
.style("stroke-width", "1")// colour the line
																.style("fill", "black")
.attr("d", "M " + p1y + " " + p1x + " L " +  p3y + " " + p3x + " L " + p2y + " " + p2x)
.attr("marker-mid", function(d){return "url(#arrow)";});
}
});


}


var removeItem1 = function(array,value)
{
//for single remove
for(var i = array.length - 1; i >= 0; i--)
{
				if(array[i] == value) 
				{ 
								array.splice(i, 1);
				}
}

}


Array.prototype.remove = function(elem, all) {
for (var i=this.length-1; i>=0; i--) {
if (this[i] === elem) {
				this.splice(i, 1);
				if(!all)
				  break;
}
}
return this;
};


var existsNameValue = function(value, name,posX,posY,type)
{
for(var i = numeric.length - 1; i >= 0; i--)
{
				if((numeric[i].split('%')[0] == name) && (Number(numeric[i].split('%')[1].split('#')[0]) == value)) 
				{ 
								numeric[i] = name+'%'+value+'#'+posX+'^'+posY+'$'+type;
								return true;
				}
}
}


var existsNameValue1 = function(value, name,posX,posY,type)
{
for(var i = numeric.length - 1; i >= 0; i--)
{
				if((numeric[i].split('%')[0] == name) && (Number(numeric[i].split('%')[1].split('#')[0]) == value)) 
				{ 
								numeric[i] = name+'%'+value+'#'+posX+'^'+posY+'$'+type;
				//            return true;
				}
}
}


// Toggle children on click.
function click(d) 
{
if (d.children) 
{
callChildNodes(d);
d._children = d.children;
d.children = null;

} 
else 
{
d.children = d._children;
d._children = null;
callChildNodestoAdd(d);
}


update(d); 
}




function callChildNodes(node) {
tempidToRemove[dvalue++]=node.value;
if(!node.children) {
d3.selectAll("#id"+node.value).remove();
return 0;
}

node.children.forEach(function(d) {
d3.selectAll("#id"+d.value).remove();
callChildNodes(d);
}) 
return 1;
}


function callChildNodestoAdd(node) {
tempidToRemove.remove(node.value);
if(!node.children) {
return 0;
}
node.children.forEach(function(d) {
callChildNodestoAdd(d);
}) 
return 1;
}


</script>





               
            </div>
            <div id="view3">
   This is section3
            </div>

           <div id="view4">
   This is section4
            </div>

        </div>
    </div>
</body>
</html>
